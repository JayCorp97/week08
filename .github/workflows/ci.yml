name: Reusable CI

on:
  workflow_call:
    inputs:
      service:
        description: "Target service folder (e.g., backend/product, frontend)"
        required: true
        type: string
      language:
        description: "Language/runtime (python/node)"
        required: true
        type: string

jobs:
  build-test:
    runs-on: ubuntu-latest
    concurrency:
      group: ci-${{ inputs.service }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      # Checkout the repository
      - uses: actions/checkout@v4

      # Setup Python environment and cache pip
      - name: Setup Python
        if: ${{ inputs.language == 'python' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache pip
        if: ${{ inputs.language == 'python' }}
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles(format('{0}/**/requirements.txt', inputs.service)) }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Setup Node.js environment and cache npm
      - name: Setup Node.js
        if: ${{ inputs.language == 'node' }}
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      # Install dependencies and run tests for Python
      - name: Install & Test (Python)
        if: ${{ inputs.language == 'python' }}
        run: |
          python -m pip install --upgrade pip
          pip install -r ${{ inputs.service }}/requirements.txt
          pip install pytest bandit
          pytest ${{ inputs.service }}/tests --maxfail=1 -q
          bandit -r ${{ inputs.service }}

      # Install dependencies and run tests for Node.js
      - name: Install & Test (Node.js)
        if: ${{ inputs.language == 'node' }}
        working-directory: ${{ inputs.service }}
        run: |
          npm ci
          npm run lint --if-present
          npm test --if-present
          npm audit --production

      # Build Docker image
      - name: Build Docker image
        run: |
          IMAGE=${{ secrets.AZURE_CONTAINER_REGISTRY }}/${{ inputs.service }}:${{ github.sha }}
          docker build -t $IMAGE ./${{ inputs.service }}
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      # Login to Azure Container Registry
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
          username: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}

      # Push Docker image to ACR
      - name: Push Docker image
        run: |
          docker push $IMAGE

      # Upload artifact (for report or debugging)
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.service }}-artifact
          path: ./${{ inputs.service }}
